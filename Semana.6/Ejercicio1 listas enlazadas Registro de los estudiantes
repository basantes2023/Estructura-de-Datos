///// Ejercicio 1. Crear un programa que maneje el registro de los estudiantes de la unidad curricular de Redes III utilizando listas enlazadas. Los estudiantes aprobados deben insertarse por el inicio y los reprobados por el final de la lista. Los datos requeridos por cada estudiante son los siguientes: cédula, nombre, apellido, correo, nota definitiva (Escala: 1-10). El programa debe permitir realizar las operaciones de:
// a. Agregar estudiante.
// b. Buscar estudiante por cédula.
// c. Eliminar un estudiante.
// d. Total estudiantes aprobados. 
// e. Total estudiantes reprobados.


using System;

namespace RegistroEstudiantes
{
    class Program
    {
        static void Main(string[] args)
        {
            LinkedList studentsList = new LinkedList();

            while (true)
            {
                Console.WriteLine("Seleccione una opcion:");
                Console.WriteLine("1. Agregar estudiante");
                Console.WriteLine("2. Buscar estudiante por cedula");
                Console.WriteLine("3. Eliminar un estudiante");
                Console.WriteLine("4. Total estudiantes aprobados");
                Console.WriteLine("5. Total estudiantes reprobados");
                Console.WriteLine("6. Salir");

                int option = int.Parse(Console.ReadLine());

                switch (option)
                {
                    case 1:
                        studentsList.AddStudent();
                        break;
                    case 2:
                        studentsList.SearchByCedula();
                        break;
                    case 3:
                        studentsList.DeleteStudent();
                        break;
                    case 4:
                        studentsList.TotalAprobados();
                        break;
                    case 5:
                        studentsList.TotalReprobados();
                        break;
                    case 6:
                        return;
                    default:
                        Console.WriteLine("Opcion no valida.");
                        break;
                }
            }
        }
    }

    public class Student
    {
        public string Cedula { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string Correo { get; set; }
        public double NotaDefinitiva { get; set; }
        public Student Next { get; set; }

        public Student(string cedula, string nombre, string apellido, string correo, double notaDefinitiva)
        {
            Cedula = cedula;
            Nombre = nombre;
            Apellido = apellido;
            Correo = correo;
            NotaDefinitiva = notaDefinitiva;
            Next = null;
        }

        public override string ToString()
        {
            return $"Cedula: {Cedula}, Nombre: {Nombre}, Apellido: {Apellido}, Correo: {Correo}, Nota Definitiva: {NotaDefinitiva}";
        }
    }

    public class LinkedList
    {
        public Student Head { get; private set; }

        public LinkedList()
        {
            Head = null;
        }

        public void AddStudent()
        {
            Console.WriteLine("Ingrese la cedula:");
            string cedula = Console.ReadLine();
            Console.WriteLine("Ingrese el nombre:");
            string nombre = Console.ReadLine();
            Console.WriteLine("Ingrese el apellido:");
            string apellido = Console.ReadLine();
            Console.WriteLine("Ingrese el correo:");
            string correo = Console.ReadLine();
            Console.WriteLine("Ingrese la nota definitiva (1-10):");
            double notaDefinitiva = double.Parse(Console.ReadLine());

            Student newStudent = new Student(cedula, nombre, apellido, correo, notaDefinitiva);

            if (notaDefinitiva >= 7)
            {
                AddFirst(newStudent);
                Console.WriteLine("Estudiante aprobado agregado al inicio de la lista.");
            }
            else
            {
                AddLast(newStudent);
                Console.WriteLine("Estudiante reprobado agregado al final de la lista.");
            }
        }

        private void AddFirst(Student newStudent)
        {
            newStudent.Next = Head;
            Head = newStudent;
        }

        private void AddLast(Student newStudent)
        {
            if (Head == null)
            {
                Head = newStudent;
            }
            else
            {
                Student current = Head;
                while (current.Next != null)
                {
                    current = current.Next;
                }
                current.Next = newStudent;
            }
        }

        public void SearchByCedula()
        {
            Console.WriteLine("Ingrese la cedula del estudiante a buscar:");
            string cedula = Console.ReadLine();

            Student current = Head;
            while (current != null)
            {
                if (current.Cedula.Equals(cedula, StringComparison.OrdinalIgnoreCase))
                {
                    Console.WriteLine("Estudiante encontrado:");
                    Console.WriteLine(current);
                    return;
                }
                current = current.Next;
            }
            Console.WriteLine("Estudiante no encontrado.");
        }

        public void DeleteStudent()
        {
            Console.WriteLine("Ingrese la cedula del estudiante a eliminar:");
            string cedula = Console.ReadLine();

            if (Head == null)
            {
                Console.WriteLine("No hay estudiantes registrados.");
                return;
            }

            if (Head.Cedula.Equals(cedula, StringComparison.OrdinalIgnoreCase))
            {
                Head = Head.Next;
                Console.WriteLine("Estudiante eliminado exitosamente.");
                return;
            }

            Student current = Head;
            while (current.Next != null)
            {
                if (current.Next.Cedula.Equals(cedula, StringComparison.OrdinalIgnoreCase))
                {
                    current.Next = current.Next.Next;
                    Console.WriteLine("Estudiante eliminado exitosamente.");
                    return;
                }
                current = current.Next;
            }
            Console.WriteLine("Estudiante no encontrado.");
        }

        public void TotalAprobados()
        {
            int count = 0;
            Student current = Head;
            while (current != null)
            {
                if (current.NotaDefinitiva >=7)
                {
                    count++;
                }
                current = current.Next;
            }
            Console.WriteLine($"Total de estudiantes aprobados: {count}");
        }

        public void TotalReprobados()
        {
            int count = 0;
            Student current = Head;
            while (current != null)
            {
                if (current.NotaDefinitiva <7)
                {
                    count++;
                }
                current = current.Next;
            }
            Console.WriteLine($"Total de estudiantes reprobados: {count}");
        }

        public void ShowAllStudents()
        {
            if (Head == null)
            {
                Console.WriteLine("No hay estudiantes registrados.");
                return;
            }

            Student current = Head;
            while (current != null)
            {
                Console.WriteLine(current);
                current = current.Next;
            }
        }
    }
}



