///Árbol binario de búsqueda 

using System;

public class Nodo
{
    public int Valor { get; set; }
    public Nodo? LadoIzquierdo { get; set; }
    public Nodo? LadoDerecho { get; set; }

    public Nodo(int valor)
    {
        Valor = valor;
        LadoIzquierdo = null;
        LadoDerecho = null;
    }
}

public class ArbolBST
{
    public Nodo? raiz;

    public ArbolBST()
    {
        raiz = null;
    }

    public void Insertar(int valor)
    {
        raiz = InsertarRecurrente(raiz, valor);
    }

    private Nodo InsertarRecurrente(Nodo? nodo, int valor)
    {
        if (nodo == null)
        {
            nodo = new Nodo(valor);
        }
        else if (valor < nodo.Valor)
        {
            nodo.LadoIzquierdo = InsertarRecurrente(nodo.LadoIzquierdo, valor);
        }
        else if (valor > nodo.Valor)
        {
            nodo.LadoDerecho = InsertarRecurrente(nodo.LadoDerecho, valor);
        }
        return nodo;
    }

    public void Preorden(Nodo? nodo)
    {
        if (nodo != null)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.Write(nodo.Valor + " ");
            Console.ResetColor();
            Preorden(nodo.LadoIzquierdo);
            Preorden(nodo.LadoDerecho);
        }
    }

    public void EnOrden(Nodo? nodo)
    {
        if (nodo != null)
        {
            EnOrden(nodo.LadoIzquierdo);
            
            Console.Write(nodo.Valor + " ");
            Console.ResetColor();
            EnOrden(nodo.LadoDerecho);
        }
    }

    public void Postorden(Nodo? nodo)
    {
        if (nodo != null)
        {
            Postorden(nodo.LadoIzquierdo);
            Postorden(nodo.LadoDerecho);
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.Write(nodo.Valor + " ");
            Console.ResetColor();
        }
    }

    public void Graficar(Nodo? nodo, string espacio = "", bool esLadoDerecho = false)
    {
        if (nodo != null)
        {
            string prefijo = espacio + (esLadoDerecho ? "├──" : "└──");

            Console.ForegroundColor = esLadoDerecho ? ConsoleColor.Green : ConsoleColor.Black;
            Console.WriteLine(prefijo + nodo.Valor);
            Console.ResetColor();

            Graficar(nodo.LadoIzquierdo, espacio + (esLadoDerecho ? "│   " : "    "), true);
            Graficar(nodo.LadoDerecho, espacio + (esLadoDerecho ? "│   " : "    "), false);
        }
    }

    public bool Buscar(int valor)
    {
        return BuscarRecurrente(raiz, valor);
    }

    private bool BuscarRecurrente(Nodo? nodo, int valor)
    {
        if (nodo == null)
            return false;
        if (nodo.Valor == valor)
            return true;
        return valor < nodo.Valor ? BuscarRecurrente(nodo.LadoIzquierdo, valor) : BuscarRecurrente(nodo.LadoDerecho, valor);
    }

    public void Eliminar(int valor)
    {
        raiz = EliminarRecurrente(raiz, valor);
    }

    private Nodo? EliminarRecurrente(Nodo? nodo, int valor)
    {
        if (nodo == null) return nodo;

        if (valor < nodo.Valor)
            nodo.LadoIzquierdo = EliminarRecurrente(nodo.LadoIzquierdo, valor);
        else if (valor > nodo.Valor)
            nodo.LadoDerecho = EliminarRecurrente(nodo.LadoDerecho, valor);
        else
        {
            // Nodo con un solo hijo o sin hijos
            if (nodo.LadoIzquierdo == null)
                return nodo.LadoDerecho;
            else if (nodo.LadoDerecho == null)
                return nodo.LadoIzquierdo;

            // Nodo con dos hijos: obtener el sucesor más pequeño
            nodo.Valor = ObtenerMinimo(nodo.LadoDerecho);
            nodo.LadoDerecho = EliminarRecurrente(nodo.LadoDerecho, nodo.Valor);
        }
        return nodo;
    }

    private int ObtenerMinimo(Nodo nodo)
    {
        while (nodo.LadoIzquierdo != null)
            nodo = nodo.LadoIzquierdo;
        return nodo.Valor;
    }

    public int ObtenerMinimoValor()
    {
        if (raiz == null)
            throw new InvalidOperationException("El arbol esta vacio.");
        return ObtenerMinimo(raiz);
    }

    public int ObtenerMaximoValor()
    {
        if (raiz == null)
            throw new InvalidOperationException("El arbol esta vacio.");
        return ObtenerMaximo(raiz);
    }

    private int ObtenerMaximo(Nodo nodo)
    {
        while (nodo.LadoDerecho != null)
            nodo = nodo.LadoDerecho;
        return nodo.Valor;
    }
}

public class Program
{
    public static void Main()
    {
        ArbolBST bst = new ArbolBST();
        bool continuar = true;

        while (continuar)
        {
            Console.WriteLine("\n--- Menu Arbol Binario de Busqueda ---");
            Console.WriteLine("1. Insertar un numero");
            Console.WriteLine("2. Buscar un numero");
            Console.WriteLine("3. Eliminar un numero");
            Console.WriteLine("4. Mostrar Pre-Orden");
            Console.WriteLine("5. Mostrar In-Orden");
            Console.WriteLine("6. Mostrar Post-Orden");
            Console.WriteLine("7. Mostrar el valor minimo");
            Console.WriteLine("8. Mostrar el valor maximo");
            Console.WriteLine("9. Impresion jerarquica");
            Console.WriteLine("10. Salir");
            Console.Write("Seleccione una opcion: ");
            string? opcion = Console.ReadLine();

            switch (opcion)
            {
                case "1":
                    Console.Write("Ingrese un numero a insertar: ");
                    if (int.TryParse(Console.ReadLine(), out int valor))
                    {
                        bst.Insertar(valor);
                        Console.WriteLine($"Numero {valor} insertado.");
                    }
                    else
                    {
                        Console.WriteLine("Numero invalido.");
                    }
                    break;

                case "2":
                    Console.Write("Ingrese un numero a buscar: ");
                    if (int.TryParse(Console.ReadLine(), out valor))
                    {
                        Console.WriteLine(bst.Buscar(valor) ? "Numero encontrado." : "Numero no encontrado.");
                    }
                    else
                    {
                        Console.WriteLine("Numero invalido.");
                    }
                    break;

                case "3":
                    Console.Write("Ingrese un numero a eliminar: ");
                    if (int.TryParse(Console.ReadLine(), out valor))
                    {
                        bst.Eliminar(valor);
                        Console.WriteLine($"Numero {valor} eliminado.");
                    }
                    else
                    {
                        Console.WriteLine("Numero invalido.");
                    }
                    break;

                case "4":
                    Console.WriteLine("Recorrido Preorden:");
                    bst.Preorden(bst.raiz);
                    Console.WriteLine();
                    break;

                case "5":
                    Console.WriteLine("Recorrido InOrden:");
                    bst.EnOrden(bst.raiz);
                    Console.WriteLine();
                    break;

                case "6":
                    Console.WriteLine("Recorrido Postorden:");
                    bst.Postorden(bst.raiz);
                    Console.WriteLine();
                    break;

                case "7":
                    try
                    {
                        Console.WriteLine($"Valor minimo: {bst.ObtenerMinimoValor()}");
                    }
                    catch (InvalidOperationException ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                    break;

                case "8":
                    try
                    {
                        Console.WriteLine($"Valor maximo: {bst.ObtenerMaximoValor()}");
                    }
                    catch (InvalidOperationException ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                    break;

                case "9":
                    Console.WriteLine("Arbol Binario de manera jerarquica:");
                    bst.Graficar(bst.raiz);
                    Console.WriteLine();
                    break;

                case "10":
                    continuar = false;
                    break;

                default:
                    Console.WriteLine("Opcion no valida. Intente nuevamente.");
                    break;
            }
        }
    }
}
