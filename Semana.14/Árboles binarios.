///Árbol binario de búsqueda 

using System;

public static class ArbolBinarioConsola
{
    public class Node
    {
        public int Value;
        public Node? Left;
        public Node? Right;

        public Node(int value)
        {
            Value = value;
            Left = null;
            Right = null;
        }
    }

    public class ArbolBinario
    {
        public Node? Raiz;

        public void Insertar(int valor)
        {
            Raiz = InsertarRecursivo(Raiz, valor);
        }

        private Node InsertarRecursivo(Node? raiz, int valor)
        {
            if (raiz == null)
            {
                return new Node(valor);
            }

            if (valor < raiz.Value)
            {
                raiz.Left = InsertarRecursivo(raiz.Left, valor);
            }
            else if (valor > raiz.Value) // Se evita la duplicación de valores.
            {
                raiz.Right = InsertarRecursivo(raiz.Right, valor);
            }

            return raiz;
        }

        public Node? Buscar(int valor)
        {
            return BuscarRecursivo(Raiz, valor);
        }

        private Node? BuscarRecursivo(Node? raiz, int valor)
        {
            if (raiz == null || raiz.Value == valor)
            {
                return raiz;
            }

            if (valor < raiz.Value)
            {
                return BuscarRecursivo(raiz.Left, valor);
            }
            else
            {
                return BuscarRecursivo(raiz.Right, valor);
            }
        }

        public void Eliminar(int valor)
        {
            Raiz = EliminarRecursivo(Raiz, valor);
        }

        private Node? EliminarRecursivo(Node? raiz, int valor)
        {
            if (raiz == null) return null;

            if (valor < raiz.Value)
            {
                raiz.Left = EliminarRecursivo(raiz.Left, valor);
            }
            else if (valor > raiz.Value)
            {
                raiz.Right = EliminarRecursivo(raiz.Right, valor);
            }
            else
            {
                if (raiz.Left == null)
                    return raiz.Right;
                else if (raiz.Right == null)
                    return raiz.Left;

                raiz.Value = MinValue(raiz.Right);
                raiz.Right = EliminarRecursivo(raiz.Right, raiz.Value);
            }

            return raiz;
        }

        public int MinValue(Node raiz)
        {
            int minValue = raiz.Value;
            while (raiz.Left != null)
            {
                minValue = raiz.Left.Value;
                raiz = raiz.Left;
            }
            return minValue;
        }

        public int MaxValue(Node raiz)
        {
            int maxValue = raiz.Value;
            while (raiz.Right != null)
            {
                maxValue = raiz.Right.Value;
                raiz = raiz.Right;
            }
            return maxValue;
        }

        public void RecorridoPreOrden(Node? raiz)
        {
            if (raiz != null)
            {
                Console.Write(raiz.Value + " ");
                RecorridoPreOrden(raiz.Left);
                RecorridoPreOrden(raiz.Right);
            }
        }

        public void RecorridoInOrden(Node? raiz)
        {
            if (raiz != null)
            {
                RecorridoInOrden(raiz.Left);
                Console.Write(raiz.Value + " ");
                RecorridoInOrden(raiz.Right);
            }
        }

        public void RecorridoPostOrden(Node? raiz)
        {
            if (raiz != null)
            {
                RecorridoPostOrden(raiz.Left);
                RecorridoPostOrden(raiz.Right);
                Console.Write(raiz.Value + " ");
            }
        }

        public void ImprimirJerarquico(Node? raiz, string sangria = "", bool esUltimo = true)
        {
            if (raiz != null)
            {
                Console.Write(sangria);

                if (esUltimo)
                {
                    Console.Write("└─");
                    sangria += "  ";
                }
                else
                {
                    Console.Write("├─");
                    sangria += "| ";
                }

                Console.WriteLine(raiz.Value);

                ImprimirJerarquico(raiz.Left, sangria, false);
                ImprimirJerarquico(raiz.Right, sangria, true);
            }
        }
    }

    public static void Run()
    {
        ArbolBinario miArbol = new ArbolBinario();

        while (true)
        {
            try
            {
                Console.WriteLine("\n--- Menu Arbol Binario de Busqueda ---");
                Console.WriteLine("1. Insertar un numero");
                Console.WriteLine("2. Buscar numero");
                Console.WriteLine("3. Eliminar numero");
                Console.WriteLine("4. Recorrido Pre-Orden");
                Console.WriteLine("5. Recorrido In-Orden");
                Console.WriteLine("6. Recorrido Post-Orden");
                Console.WriteLine("7. Mostrar valor manimo");
                Console.WriteLine("8. Mostrar valor maximo");
                Console.WriteLine("9. Imprimir arbol jerarquico");
                Console.WriteLine("10. Salir");
                Console.Write("Elige una opcion: ");
                int opcion = Convert.ToInt32(Console.ReadLine());

                switch (opcion)
                {
                    case 1:
                        Console.Write("Ingrese el numero a insertar: ");
                        int valorInsertar = Convert.ToInt32(Console.ReadLine());
                        miArbol.Insertar(valorInsertar);
                        Console.WriteLine($"Numero {valorInsertar} insertado correctamente.");
                        break;

                    case 2:
                        Console.Write("Ingrese numero a buscar: ");
                        int valorBuscar = Convert.ToInt32(Console.ReadLine());
                        Node? nodoBuscado = miArbol.Buscar(valorBuscar);
                        Console.WriteLine(nodoBuscado != null ? $"Numero {valorBuscar} encontrado." : $"Numero {valorBuscar} no encontrado.");
                        break;

                    case 3:
                        Console.Write("Ingrese numero a eliminar: ");
                        int valorEliminar = Convert.ToInt32(Console.ReadLine());
                        miArbol.Eliminar(valorEliminar);
                        Console.WriteLine($"Numero {valorEliminar} eliminado.");
                        break;

                    case 4:
                        Console.WriteLine("Recorrido Pre-Orden:");
                        miArbol.RecorridoPreOrden(miArbol.Raiz);
                        Console.WriteLine();
                        break;

                    case 5:
                        Console.WriteLine("Recorrido In-Orden:");
                        miArbol.RecorridoInOrden(miArbol.Raiz);
                        Console.WriteLine();
                        break;

                    case 6:
                        Console.WriteLine("Recorrido Post-Orden:");
                        miArbol.RecorridoPostOrden(miArbol.Raiz);
                        Console.WriteLine();
                        break;

                    case 7:
                        if (miArbol.Raiz != null)
                            Console.WriteLine("Valor minimo: " + miArbol.MinValue(miArbol.Raiz));
                        else
                            Console.WriteLine("El arbol esta vacio.");
                        break;

                    case 8:
                        if (miArbol.Raiz != null)
                            Console.WriteLine("Valor maximo: " + miArbol.MaxValue(miArbol.Raiz));
                        else
                            Console.WriteLine("El arbol esta vacio.");
                        break;

                    case 9:
                        Console.WriteLine("Impresion jerarquica del arbol:");
                        miArbol.ImprimirJerarquico(miArbol.Raiz);
                        break;

                    case 10:
                        Console.WriteLine("Saliendo del programa.");
                        return;

                    default:
                        Console.WriteLine("Opcion invalida. Intente de nuevo.");
                        break;
                }
            }
            catch (FormatException)
            {
                Console.WriteLine("Error: Por favor, ingrese un numero válido.");
            }
        }
    }
}

class Program
{
    static void Main()
    {
        ArbolBinarioConsola.Run();
    }
}

